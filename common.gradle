/*
 * Copyright 2010-** : Frederick Bloom / hanasaki
 *
 * Licensed under : TBD
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//
// This file is to be applied to every subproject.
//

//apply plugin: 'java'
//apply plugin: 'maven'
//apply plugin: 'maven-publish'
//apply plugin: 'project-report' // htmlDependencyReport, projectReport, dependencyReport

//group = myProjectGroup
//version = '1.2.3'
//version = myProjectVersion
//sourceCompatibility = myProjectSrcVersion
ext.isSnapshot = version.endsWith("-SNAPSHOT")

task printVersion {
    // any code that goes here is part of configuring the task
    // this code will always get run, even if the task is not executed
    //    doLast { // add a task action
    // any code that goes here is part of executing the task
    // this code will only get run if and when the task gets executed
    println "Gradle.Version => ${project.gradle.gradleVersion}"
    println "Building => ${project.group}:${project.name}:${project.version} // src/target=${sourceCompatibility}/${targetCompatibility}"
    //    }
}

repositories {
    mavenLocal()
    mavenCentral();
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories

    maven { url "https://plugins.gradle.org/m2" }
}

//apply plugin: id com.dorongold.task-tree" version "1.3"


//build {
//    plugins{
//        plugin {
//            groupId 'org.apache.maven.plugins'
//            artifactId 'maven-compiler-plugin'
//            configuration{
//                source '1.8'
//                target '1.8'
//            }
//        }
//    }
//}

jar {
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Main-Class': 'com.Main',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Build-Time-ISO-8601': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ss"),
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Host': InetAddress.getLocalHost().getCanonicalHostName(),
            'OS-Name': System.getProperties().get("os.name"),
            'Source-Compatibility': project.sourceCompatibility,
            'Target-Compatibility': project.targetCompatibility,
            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}
task jarMainSources(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Main-Class': 'com.Main',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Build-Time-ISO-8601': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ss"),
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
                        'Built-Host-Name': InetAddress.getLocalHost().getCanonicalHostName(),
            'Built-Host-IP': InetAddress.getLocalHost().getHostAddress(),
            'OS-Name': System.getProperties().get("os.name"),
            'Source-Compatibility': project.sourceCompatibility,
            'Target-Compatibility': project.targetCompatibility,
            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}
//task javadocp(type: Javadoc) {
//    source subprojects.sourceSets*.main*.allJava
//    classpath = files(subprojects.sourceSets*.main*.compileClasspath)
//    options.docletpath = configurations.javadoclet.files.asType(List)
//    options.doclet = 'org.umlgraph.doclet.UmlGraphDoc'
//    options.classpath subprojects.sourceSets*.main*.classesDir
//    options.memberLevel = 'PRIVATE'
//    // These result in the option not being passed at all.
//    options.addStringOption('inferrel', null)
//    options.addStringOption('inferrel')
//    // This results in an empty string as an argument to the option, which is invalid.
//    options.addStringOption('inferrel', '')
//}
// https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/MinimalJavadocOptions.html
compileJava {
    options.compilerArgs << "-Xlint:all"
}

javadoc {
    options.encoding = 'UTF-8'
    options.memberLevel = 'PROTECTED'
    //    options.addStringOption 'Xdoclint:syntax,html,reference', '-quiet'
    //    options.addStringOption 'Xdoclint:akll'
    //    if (javaVersion.isJava8Compatible()) {
    //    options.addStringOption 'Xdoclint:syntax,reference', '-warn'
    //    options.addStringOption 'Xdoclint:syntax,html,reference', '-warn'
    options.addStringOption 'doclint:all'
    //    }
    //    options.addStringOption "stylesheetfile", stylesheetFile.absolutePath
    //    source publicGroovyProjects.collect {project -> project.sourceSets.main.allJava }
    //    options.footer = 'hanaden.com'
    //    options.bottom = 'bottomtext'
    //    options.header ="dddddddddddddddd"
}
task jarMainJavaDoc(type: Jar, dependsOn: javadoc) {
    //    options.addStringOption('encoding', 'UTF-8')
    //    options.addBooleanOption('html5', true)
    classifier = 'javadoc'
    from javadoc.destinationDir
    //    if(JavaVersion.current().isJava9Compatible()) {
    //        options.addBooleanOption('html4', true)
    //    }
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Main-Class': 'com.Main',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Build-Time-ISO-8601': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ss"),
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
                        'Built-Host-Name': InetAddress.getLocalHost().getCanonicalHostName(),
            'Built-Host-IP': InetAddress.getLocalHost().getHostAddress(),
            'OS-Name': System.getProperties().get("os.name"),
            'Source-Compatibility': project.sourceCompatibility,
            'Target-Compatibility': project.targetCompatibility,
            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}
task jarTest(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'test'
    from sourceSets.test.output
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Main-Class': 'com.Main',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Build-Time-ISO-8601': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ss"),
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Host-Name': InetAddress.getLocalHost().getCanonicalHostName(),
            'Built-Host-IP': InetAddress.getLocalHost().getHostAddress(),
            'OS-Name': System.getProperties().get("os.name"),
            'Source-Compatibility': project.sourceCompatibility,
            'Target-Compatibility': project.targetCompatibility,
            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}
task jarTestSources(type: Jar, dependsOn: classes, description: 'Creates a jar from the source test files.') {
    classifier = 'test-sources'
    from sourceSets.test.allSource
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Main-Class': 'com.Main',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Build-Time-ISO-8601': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ss"),
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Host-Name': InetAddress.getLocalHost().getCanonicalHostName(),
            'Built-Host-IP': InetAddress.getLocalHost().getHostAddress(),
            'OS-Name': System.getProperties().get("os.name"),
            'Source-Compatibility': project.sourceCompatibility,
            'Target-Compatibility': project.targetCompatibility,
            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}

compileTestJava {
    sourceCompatibility = 1.9
    targetCompatibility = 1.9
    options.compilerArgs += '-parameters'
}


test {
    useJUnitPlatform()
    //        junitPlatform {
    //            filters {
    //                engines {
    //                    include 'junit-jupiter', 'junit-vintage'
    //                }
    //                tags {
    //                    exclude 'slow'
    //                }
    //                includeClassNamePatterns '.*Test', '.*Tests'
    //            }
    //        }
    reports.junitXml.destination="build/junit/test-results"
    reports.html.destination="build/junit/test-reports"
    //    printSummary=true

    //    jacoco {
    //        destinationFile = file("build/jacoco/jacoco.exec")
    //        append=true
    //    }
    // use the syntax below to exclude based on filepath
    // exclude(["**/webdriver/*", "**/pagefactory/*"] as List)
    // The syntax below works for Tags - either String names or Tag objects work
    options {
        setExcludeTags(["Framework", "Blocking", "Navigation"] as Set)
    }
    // Finally we have access to parallel running for junit 5 tests!
    maxParallelForks 4
    //    useJUnitPlatform {
    // platformVersion '1.0.0'
    //        filters {
    //            engines {
    //                // include 'junit-jupiter', 'junit-vintage'
    //                // exclude 'custom-engine'
    //            }
    //            tags {
    //                // include 'fast'
    //                exclude 'slow'
    //            }
    //            // includeClassNamePattern '.*Test'
    //        }
    // configurationParameter 'junit.jupiter.conditions.deactivate', '*'
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    //        logManager 'org.apache.logging.log4j.jul.LogManager'
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    jacoco {
        append = false
        enabled = true
        //        destPath = file("${buildDir}/jacoco/test-results")
        destinationFile = file("$buildDir/jacoco/test-results/test.exec") // netbeans finds file test.exec
        classDumpDir = file("$buildDir/jacoco/test-results/classpathdumps")
        //        reportsDir = file("$buildDir/jacoco/test-results") // readonly by plugin
    }
    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled true
            html.enabled  true
            html.destination file("${buildDir}/jacoco/test-reports")
        }
    }
}

//configurations {
//    junitXmlToHtml
//}
////// https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests
//task generateHtmlTestReports << {
//    def reportsDir = new File(buildDir, 'junit/test-reportsB')
//    reportsDir.mkdirs()
//
//    ant.taskdef(
//        name: 'junitReport',
//        classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
//        classpath: configurations.junitXmlToHtml.asPath
//        //        classpath: ['org.apache.ant:ant-junit:1.10.5', 'ant:ant-optional:1.5.3-1']
//    )
//
//    ant.junitReport(todir: "$buildDir/junit/test-results/junit-platform", tofile: "aggregated-test-results.xml") {
//        fileset(dir: "$buildDir/test-results/junit-platform")
//        report(format: 'frames', todir: reportsDir)
//    }
//}
//afterEvaluate {
//    def junitPlatformTestTask = tasks.getByName('test')
//    generateHtmlTestReports.dependsOn(test)
//    check.dependsOn(generateHtmlTestReports)
//}


//jacocoTestReport {
//    reports {
//        xml.enabled true
//        csv.enabled true
//        html.destination "${buildDir}/jacoco/test-reports"
//    }
//    test {
//        jacoco {
//            destinationFile = file("$buildDir/jacoco/test-results/jacocoTest.exec")
//            //            reportsDir = file("$buildDir/customJacocoReportDir")
//            //            classDumpFile = file("$buildDir/jacoco/classpathdumps")
//            //excludes =
//        }
//    }
//}

artifacts {
    //    archives jarMain
    archives jarMainSources
    archives jarMainJavaDoc
    archives jarTest
    archives jarTestSources
}

//configure(install.repositories.mavenInstaller) {
//    pom.project {
//        groupId = project.group
//        artifactId = project.name
//        version = project.version
//    }
//}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}

//createPom.dependsOn build

//===========
if (plugins.hasPlugin('android') || plugins.hasPlugin('android-library')) {
    android {
        defaultConfig {
            versionName = calculateVersionName()
            versionCode = calculateVersionCode()
        }

        afterEvaluate {
            def autoIncrementVariant = { variant ->
                if (variant.buildType.name == buildTypes.release.name) { // don't increment on debug builds
                    variant.preBuild.dependsOn incrementVersion
                    incrementVersion.doLast {
                        variant.mergedFlavor.versionName = calculateVersionName()
                        variant.mergedFlavor.versionCode = calculateVersionCode()
                    }
                }
            }
            if (plugins.hasPlugin('android')) {
                applicationVariants.all { variant -> autoIncrementVariant(variant) }
            }
            if (plugins.hasPlugin('android-library')) {
                libraryVariants.all { variant -> autoIncrementVariant(variant) }
            }
        }
    }
}


//================
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact jarMainSources
            artifact jarMainJavaDoc
            artifact jarTest
            artifact jarTestSources
            afterEvaluate {
                artifactId = jar.baseName
            }
            pom {
                groupId project.group
                artifactId project.name
                version project.version
                //
                name = project.name
                description = 'A concise description of my library'
                url = 'http://www.example.com/library'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'johnd'
                        name = 'John Doe'
                        email = 'john.doe@....com'
                    }
                }
                scm {
                    connection = 'scm:git:git://....com/my-library.git'
                    developerConnection = 'scm:git:ssh://...com/my-library.git'
                    url = 'http://....com/my-library/'
                }
            }

        }
    }
    repositories {
        maven {
            credentials {
                username "anonymous"
            }

            if(project.version.endsWith('-SNAPSHOT')) {
                url "http://example/artifactory/libs-snapshot-local"
            } else {
                url "http://example/artifactory/libs-release-local"
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    // Call your methods here using the task graph
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'http://myCompanyRepo.com:8081/releases') {
                authentication(userName: 'admin', password: 'password');
            }
            snapshotRepository(url: 'http://myCompanyRepo.com:8081/snapshots') {
                authentication(userName: 'admin', password: 'password');
            }
        }
    }
}

defaultTasks 'clean', 'build', 'publishToMavenLocal'